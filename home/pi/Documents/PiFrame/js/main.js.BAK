const electron = require('electron');
const app = electron.app
const BrowserWindow = electron.BrowserWindow;

// Config
var config = {};

// Keep a global reference of the window object, if you don't, the window will
// be closed automatically when the JavaScript object is garbage collected.
let mainWindow;

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
app.on('ready',function(){
  console.log('Lunching Applicaiton');
  createWindow();
});

// Quit when all windows are closed.
app.on("window-all-closed", function() {
	createWindow();
});

app.on("activate", function() {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (mainWindow === null) {
		createWindow();
	}
});

function createWindow() {

	var electronOptionsDefaults = {
		width: 1080,
		height: 720,
		x: 0,
		y: 0//,
		//darkTheme: true,
		//webPreferences: {
		//	nodeIntegration: false,
		//	zoomFactor: config.zoom
		//}
	}

	electronOptionsDefaults.fullscreen = true;
	electronOptionsDefaults.autoHideMenuBar = true;


	var electronOptions = Object.assign({}, electronOptionsDefaults, config.electronOptions);

	// Create the browser window.
	mainWindow = new BrowserWindow(electronOptions);

	// and load the index.html of the app.
	mainWindow.loadURL('file://' + __dirname + '../index.html');
	//mainWindow.loadURL("http://localhost:" + config.port);

	// Open the DevTools if run with "npm start dev"
	if(process.argv[2] == "dev") {
		mainWindow.webContents.openDevTools();
	}

	// Set responders for window events.
	mainWindow.on("closed", function() {
		mainWindow = null;
	});

	// if (config.kioskmode) {
	// 	mainWindow.on("blur", function() {
	// 		mainWindow.focus();
	// 	});
  //
	// 	mainWindow.on("leave-full-screen", function() {
	// 		mainWindow.setFullScreen(true);
	// 	});
  //
	// 	mainWindow.on("resize", function() {
	// 		setTimeout(function() {
	// 			mainWindow.reload();
	// 		}, 1000);
	// 	});
	// }
}
